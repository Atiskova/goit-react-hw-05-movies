{"version":3,"file":"static/js/247.ab39b578.chunk.js","mappings":"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","sources":["components/Cast/Cast.jsx","service/api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport { getCast } from 'service/api';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    const getMoviesCast = async () => {\n      try {\n        setLoading(true);\n        const cast = await getCast(movieId);\n        setCast(cast);\n\n        setError(null);\n      } catch (error) {\n        setError(error.massage);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getMoviesCast();\n  }, [movieId]);\n\n  useEffect(() => {\n    if (!error) return;\n    alert(error);\n  }, [error]);\n\n  return (\n    <>\n      {cast && (\n        <ul>\n          {cast.map(({ id, name, character, profile_path }) => {\n            const getPoster = () => {\n              if (profile_path) {\n                return `https://image.tmdb.org/t/p/w500/${profile_path}`;\n              } else {\n                return 'https://dummyimage.com/500x750/ccc/fff.jpg&text=No+poster';\n              }\n            };\n            return (\n              <li key={id}>\n                <img src={getPoster()} alt={name} width=\"150px\"/>\n                <p>{name}</p>\n                <p>\n                  Character: <span>{character}</span>\n                </p>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n      {cast.length === 0 && <p>We don't have any cast for this movie</p>}\n      {loading && <Loader />}\n    </>\n  );\n};\n\nexport default Cast;","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'c978ef3256c1133ebe18d58ddb2527be';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(\n    `${BASE_URL}trending/all/day?api_key=${API_KEY}`\n  );\n  const { results } = data;\n  const movies = results.map(({ id, title, name }) => ({\n    id,\n    title,\n    name,\n  }));\n  return { movies };\n};\n\nexport const getSearch = async query => {\n  const { data } = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  const { results } = data;\n  const movies = results.map(({ id, title, name }) => ({\n    id,\n    title,\n    name,\n  }));\n  return { movies };\n};\n\nexport const getDetails = async id => {\n  const { data } = await axios.get(\n    `${BASE_URL}movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  const {\n    poster_path,\n    title,\n    name,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n  } = data;\n \n  return {\n    poster_path,\n    title,\n    name,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n  };\n};\n\nexport const getCast = async id => {\n  const { data } = await axios.get(\n    `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  const cast = data.cast.map(({ id, name, character, profile_path }) => ({\n    id,\n    name,\n    character,\n    profile_path,\n  }));\n  return cast;\n};\n\nexport const getReviews = async id => {\n  const { data } = await axios.get(\n    `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  const reviews = data.results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n  \n  return reviews;\n};\n"],"names":["useState","cast","setCast","loading","setLoading","error","setError","movieId","useParams","useEffect","getMoviesCast","getCast","massage","alert","map","id","name","character","profile_path","src","alt","width","length","BASE_URL","API_KEY","getTrendingMovies","axios","data","results","movies","title","getSearch","query","getDetails","poster_path","release_date","vote_average","overview","genres","getReviews","reviews","author","content"],"sourceRoot":""}